#!/usr/bin/env node
(() => {
"use strict";
const app = require( "../app" );

if ( !app ) return;

/**
 * Normalize a port into a number, string, or false.
 */
function _normalizePort( val ) {
	const port = parseInt( val, 10 );

	if ( isNaN( port ) ) {
		// named pipe
		return val;
	}

	if ( port >= 0 ) {
		// port number
		return port;
	}

	return false;
}

/**
 * Module dependencies.
 */
const _server = app.get( "server" )
	, _address = _server.address()
	, _port = _normalizePort( app.get( "port" ) );

/**
 * Event listener for HTTP server "error" event.
 */
function _onError( error ) {
	if ( error.syscall !== "listen" ) {
		throw error;
	}

	const bind = ( typeof _port === "string"
		? `Pipe ${_port}`
		: `Port ${_port}`
	);

	// handle specific listen errors with friendly messages
	switch ( error.code ) {
		case "EACCES":
			console.error( `${bind} requires elevated privileges` );
			process.exit( 1 );
			break;
		case "EADDRINUSE":
			console.error( `${bind} is already in use` );
			process.exit( 1 );
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function _onListening() {
	const bind = ( typeof _address === "string"
		? `pipe ${_address}`
		: `port ${_port}`
	);
	console.log( `Listening on ${bind}` );
}

_server
	.on( "error", _onError )
	.on( "listening", _onListening );
} )();